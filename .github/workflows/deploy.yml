name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'src/**'

  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'src/**'

  workflow_dispatch:

env:
  FUNCTION_APP_SRC_DIRECTORY: src/
  INFRASTRUCTURE_DIRECTORY: infra/

  BICEP_FILE_NAME: main.bicep
  BICEP_PARAMS_FILE_NAME: main.bicepparam

  FUNCTION_APP_ARTIFACT_NAME: functionapp
  FUNCTION_APP_ZIP_NAME: functionapp.zip

  DOTNET_VERSION: 9.0.x

jobs:
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep
        working-directory: ${{ env.INFRASTRUCTURE_DIRECTORY }}
        run: |
          az bicep install
          az bicep build -f ${{ env.BICEP_FILE_NAME }} --stdout
          az bicep build-params -f ${{ env.BICEP_PARAMS_FILE_NAME }} --stdout

  build-functionapp:
    name: Build Function App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test -c Release --no-build --no-restore

      - name: Publish
        run: dotnet publish ${{ env.FUNCTION_APP_SRC_DIRECTORY }} -c Release --no-build -o ./publish

      - name: Package Function App
        run: |
          cd publish
          zip -r ../${{ env.FUNCTION_APP_ZIP_NAME }} .

      - name: Upload Function App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FUNCTION_APP_ARTIFACT_NAME }}
          path: ${{ env.FUNCTION_APP_ZIP_NAME }}
          if-no-files-found: error

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, build-functionapp]
    environment: production
    outputs:
      appName: ${{ steps.deploy.outputs.appName }}
      keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}
      secretName: ${{ steps.deploy.outputs.secretName }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Service Principal Object ID
        id: get_sp_id
        run: |
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')

          OBJECT_ID=$(az ad sp list \
            --filter "appId eq '$CLIENT_ID'" \
            --query "[0].id" \
            --output tsv)

          if [ -z "$OBJECT_ID" ]; then
            echo "Error: Failed to retrieve objectId for clientId $CLIENT_ID"
            exit 1
          fi

          echo "objectId=$OBJECT_ID" >> $GITHUB_OUTPUT
          echo "Retrieved Service Principal Object ID: $OBJECT_ID"

      - name: Deploy Bicep
        id: deploy
        working-directory: ${{ env.INFRASTRUCTURE_DIRECTORY }}
        run: |
          deploymentOutput=$(az deployment group create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --template-file ${{ env.BICEP_FILE_NAME }} \
            --parameters ${{ env.BICEP_PARAMS_FILE_NAME }} \
            --parameters githubSpObjectId="${{ steps.get_sp_id.outputs.objectId }}" \
            --query properties.outputs \
            --output json)

          appName=$(echo $deploymentOutput | jq -r '.appName.value')
          keyVaultName=$(echo $deploymentOutput | jq -r '.keyVaultName.value')
          secretName=$(echo $deploymentOutput | jq -r '.secretName.value')

          echo "appName=$appName" >> $GITHUB_OUTPUT
          echo "keyVaultName=$keyVaultName" >> $GITHUB_OUTPUT
          echo "secretName=$secretName" >> $GITHUB_OUTPUT

  set-kv-secrets:
    name: Set Key Vault Secrets
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: production

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Key Vault Secret
        run: |
          az keyvault secret set \
            --vault-name ${{ needs.deploy-infrastructure.outputs.keyVaultName }} \
            --name ${{ needs.deploy-infrastructure.outputs.secretName }} \
            --value "${{ secrets.LOTTO_API_KEY }}"

  deploy-functionapp:
    name: Deploy Function App
    runs-on: ubuntu-latest
    needs: [build-functionapp, deploy-infrastructure, set-kv-secrets]
    environment: production

    steps:
      - name: Download Function App Artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.FUNCTION_APP_ARTIFACT_NAME }}
          path: functionapp

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy To Azure
        run: |
          az functionapp deployment source config-zip \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ needs.deploy-infrastructure.outputs.appName }} \
            --src functionapp/${{ env.FUNCTION_APP_ZIP_NAME }}
